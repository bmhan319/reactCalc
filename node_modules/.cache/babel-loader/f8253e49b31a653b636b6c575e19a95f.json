{"ast":null,"code":"var _jsxFileName = \"/Users/bmhan319/Desktop/reactjs_projects/calculator/src/Calculator.js\";\nimport React, { Component } from 'react';\n\nclass Calculator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      display: 0,\n      //this is what is shown on the calc display\n      convertNum: true,\n      convert2ndNum: true,\n      isFirstExpr: true //when true, calc will deal with first input number, false will be the 2nd number\n      //Global Variables for the equation\n\n    };\n    this.firstNum = \"\";\n    this.secondNum = \"\";\n    this.symbol = \"\";\n\n    this.submit = num => {\n      let regex = /[-+*/]/;\n      let result1 = num.match(regex);\n      let result2 = num.match(regex); //if arithmatic operators are pushed first, reset\n\n      if (result1 !== null && this.firstNum.length === 0) {\n        this.handleClear();\n      } //if a valid numerical or decimal key is pressed first, add it to the state\n      //decimal function added to make sure that the decimal only gets pressed once for the first input number,\n      //then Pointer Events is disabled on that button\n      //display function added to check the number of characters on the display and resize when necessary\n\n\n      if (this.state.isFirstExpr) {\n        if (result1 == null) {\n          this.firstNum = \"\" + this.firstNum + num;\n          this.setState({\n            display: this.firstNum\n          });\n          this.decimal(\"first\", num);\n          this.display();\n        } //if an arithmatic operator is pressed, add it to the state\n        //display function added to check the number of characters on the display and resize when necessary\n\n\n        if (result1 !== null && this.firstNum.length > 0) {\n          this.symbol = num;\n          this.setState({\n            display: this.firstNum + this.symbol,\n            isFirstExpr: false\n          });\n          document.querySelector(\".decimal\").disabled = false;\n          this.display();\n        }\n      } //moving the calculator onto the 2nd input number\n      //decimal function added to make sure that the decimal only gets pressed once for the 2nd input number,\n      //then Pointer Events is disabled on that button\n      //display function added to check the number of characters on the display and resize when necessary\n\n\n      if (this.state.isFirstExpr === false) {\n        if (result2 == null) {\n          this.secondNum = \"\" + this.secondNum + num;\n          this.setState({\n            display: this.firstNum + this.symbol + this.secondNum,\n            isFirstExpr: false\n          });\n          this.decimal(\"second\", this.secondNum);\n        }\n\n        this.display();\n      }\n    };\n\n    this.flash = button => {\n      let calcButton = document.querySelector(button);\n      calcButton.classList.add(\"flash\");\n      setTimeout(function () {\n        calcButton.classList.remove(\"flash\");\n      }, 500);\n    };\n\n    this.decimal = (string, num) => {\n      let hasDecimal1 = num.match(/[.]/);\n      let hasDecimal2 = num.match(/[.]/);\n\n      if (hasDecimal1 && string === \"first\") {\n        document.querySelector(\".decimal\").disabled = \"true\";\n      } else if (hasDecimal2 && string === \"second\") {\n        document.querySelector(\".decimal\").disabled = \"true\";\n      }\n    };\n\n    this.handleClear = () => {\n      this.firstNum = \"\";\n      this.secondNum = \"\";\n      document.querySelector(\".decimal\").disabled = false;\n      this.setState({\n        display: 0,\n        convertNum: true,\n        convert2ndNum: true,\n        isFirstExpr: true\n      });\n      this.display();\n    };\n\n    this.handleConvert = () => {\n      //to prevent user from hitting the conversion button prior to entering a number\n      if (this.firstNum === \"\") {\n        return;\n      } //change both numbers from string to a float number\n\n\n      let convert = parseFloat(this.firstNum);\n      let convert2nd = parseFloat(this.secondNum); //if true, handle the first number\n\n      if (this.state.isFirstExpr) {\n        // if true, make the number negative\n        if (this.state.convertNum) {\n          let toNeg = -Math.abs(convert);\n          toNeg = toNeg.toString();\n          this.setState({\n            convertNum: false\n          });\n          this.firstNum = toNeg; //if false, make the number positive\n        } else {\n          let toPos = Math.abs(convert);\n          toPos = toPos.toString();\n          this.setState({\n            convertNum: true\n          });\n          this.firstNum = toPos;\n        }\n\n        this.setState({\n          display: this.firstNum\n        });\n        this.display(); //if false, then handle second number    \n      } else {\n        // if true, make the number negative\n        if (this.state.convert2ndNum) {\n          let toNeg = -Math.abs(convert2nd);\n          toNeg = toNeg.toString();\n          this.setState({\n            convert2ndNum: false\n          });\n          this.secondNum = toNeg; //if false, make the number positive\n        } else {\n          let toPos = Math.abs(convert2nd);\n          toPos = toPos.toString();\n          this.setState({\n            convert2ndNum: true\n          });\n          this.secondNum = toPos;\n        }\n\n        this.setState({\n          display: this.firstNum + this.symbol + \"(\" + this.secondNum + \")\"\n        });\n        this.display();\n      }\n    };\n\n    this.handlePercent = () => {\n      //prevents user from hitting the button prior to entering a number\n      if (this.firstNum === \"\") {\n        return;\n      }\n\n      let convert = parseFloat(this.firstNum);\n      let convert2nd = parseFloat(this.secondNum);\n      let percent = convert / 100;\n      let percent2nd = convert2nd / 100; //if true, handle first number\n\n      if (this.state.isFirstExpr) {\n        percent = percent.toString();\n        this.firstNum = percent;\n        this.setState({\n          display: this.firstNum\n        });\n        this.display(); //if true, handle first number\n      } else {\n        percent2nd = percent2nd.toString();\n        this.secondNum = percent2nd;\n        this.setState({\n          display: this.firstNum + this.symbol + this.secondNum\n        });\n        this.display();\n      }\n    };\n\n    this.handleEqual = () => {\n      let result = 0;\n      let numFirstNum = Number(this.firstNum);\n      let numSecondNum = Number(this.secondNum);\n\n      if (this.symbol === \"+\") {\n        result = numFirstNum + numSecondNum;\n      } else if (this.symbol === \"-\") {\n        result = numFirstNum - numSecondNum;\n      } else if (this.symbol === \"*\") {\n        result = numFirstNum * numSecondNum;\n      } else if (this.symbol === \"/\") {\n        result = numFirstNum / numSecondNum;\n      } //give result back with x decimal places\n      //finalResult = result.toFixed()\n      //reset most of the states and variables back to initial state\n      //display and firstNum show result in case user wants to compute further\n\n\n      this.firstNum = result;\n      this.secondNum = \"\";\n      this.symbol = \"\";\n      console.log(\"first: \" + this.firstNum);\n      console.log(\"symbol: \" + this.symbol);\n      console.log(\"second: \" + this.secondNum);\n      console.log(\"result: \" + result);\n      document.querySelector(\".decimal\").disabled = false;\n      this.display(result);\n      this.setState({\n        display: result,\n        convertNum: true,\n        convert2ndNum: true,\n        isFirstExpr: true\n      });\n      console.log(\"state display: \" + this.state.display);\n    };\n\n    this.display = resultLength => {\n      let display = document.querySelector('.display-text');\n\n      if (this.firstNum.length + this.symbol.length + this.secondNum.length > 10 || resultLength > 10) {\n        display.classList.add(\"display-text-small\");\n        display.classList.remove(\"display-text-large\");\n      } else if (this.firstNum.length + this.symbol.length + this.secondNum.length <= 10 || resultLength <= 10) {\n        display.classList.remove(\"display-text-small\");\n        display.classList.add(\"display-text-large\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"calc-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"display-text display-text-large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, this.state.display)), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleClear();\n        this.flash(\".clear\");\n      },\n      className: \"button text dark-grey clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"C\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleConvert();\n        this.flash(\".negative\");\n      },\n      className: \"button text dark-grey negative\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"+/-\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handlePercent();\n        this.flash(\".percent\");\n      },\n      className: \"button text dark-grey percent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"%\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"/\");\n        this.flash(\".divide\");\n      },\n      className: \"button text orange divide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, \"/\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"7\");\n        this.flash(\".seven\");\n      },\n      className: \"button text light-grey seven\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"7\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"8\");\n        this.flash(\".eight\");\n      },\n      className: \"button text light-grey eight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, \"8\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"9\");\n        this.flash(\".nine\");\n      },\n      className: \"button text light-grey nine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"9\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"*\");\n        this.flash(\".multiply\");\n      },\n      className: \"button text orange multiply\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"X\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"4\");\n        this.flash(\".four\");\n      },\n      className: \"button text light-grey four\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"4\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"5\");\n        this.flash(\".five\");\n      },\n      className: \"button text light-grey five\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"5\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"6\");\n        this.flash(\".six\");\n      },\n      className: \"button text light-grey six\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"6\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"-\");\n        this.flash(\".subtract\");\n      },\n      className: \"button text orange subtract\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"-\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"1\");\n        this.flash(\".one\");\n      },\n      className: \"button text light-grey one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"1\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"2\");\n        this.flash(\".two\");\n      },\n      className: \"button text light-grey two\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"2\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"3\");\n        this.flash(\".three\");\n      },\n      className: \"button text light-grey three\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"3\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"+\");\n        this.flash(\".add\");\n      },\n      className: \"button text orange add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"+\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\"0\");\n        this.flash(\".zero\");\n      },\n      className: \"text light-grey zero\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"0\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.submit(\".\");\n        this.flash(\".decimal\");\n      },\n      className: \"button text light-grey decimal\",\n      disabled: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \".\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleEqual();\n        this.flash(\".equals\");\n      },\n      className: \"button text orange equals\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"=\"));\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/Users/bmhan319/Desktop/reactjs_projects/calculator/src/Calculator.js"],"names":["React","Component","Calculator","state","display","convertNum","convert2ndNum","isFirstExpr","firstNum","secondNum","symbol","submit","num","regex","result1","match","result2","length","handleClear","setState","decimal","document","querySelector","disabled","flash","button","calcButton","classList","add","setTimeout","remove","string","hasDecimal1","hasDecimal2","handleConvert","convert","parseFloat","convert2nd","toNeg","Math","abs","toString","toPos","handlePercent","percent","percent2nd","handleEqual","result","numFirstNum","Number","numSecondNum","console","log","resultLength","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nclass Calculator extends Component {\n  state = {\n    display: 0,           //this is what is shown on the calc display\n    convertNum: true,\n    convert2ndNum: true,\n    isFirstExpr: true     //when true, calc will deal with first input number, false will be the 2nd number\n  }\n\n  //Global Variables for the equation\n  firstNum = \"\"\n  secondNum = \"\"\n  symbol = \"\"\n\n  //to submit the numbers\n  submit = (num) => {\n    let regex = /[-+*/]/\n    let result1 = num.match(regex)\n    let result2 = num.match(regex)\n\n    //if arithmatic operators are pushed first, reset\n    if (result1 !== null && this.firstNum.length === 0) {\n      this.handleClear()\n    }\n\n    //if a valid numerical or decimal key is pressed first, add it to the state\n    //decimal function added to make sure that the decimal only gets pressed once for the first input number,\n    //then Pointer Events is disabled on that button\n    //display function added to check the number of characters on the display and resize when necessary\n    if (this.state.isFirstExpr) {\n      if (result1 == null) {\n        this.firstNum = \"\" + this.firstNum + num\n        this.setState({\n          display: this.firstNum\n        })\n        this.decimal(\"first\", num)\n        this.display()\n      } \n\n      //if an arithmatic operator is pressed, add it to the state\n      //display function added to check the number of characters on the display and resize when necessary\n      if (result1 !== null && this.firstNum.length > 0) {\n        this.symbol = num\n        this.setState({\n          display: this.firstNum + this.symbol,\n          isFirstExpr: false\n        })\n        document.querySelector(\".decimal\").disabled = false\n        this.display()\n      }\n    }\n    \n    //moving the calculator onto the 2nd input number\n    //decimal function added to make sure that the decimal only gets pressed once for the 2nd input number,\n    //then Pointer Events is disabled on that button\n    //display function added to check the number of characters on the display and resize when necessary\n    if (this.state.isFirstExpr === false) {\n      if (result2 == null) {\n        this.secondNum = \"\" + this.secondNum + num\n        this.setState({\n          display: this.firstNum + this.symbol + this.secondNum,\n          isFirstExpr: false,\n        })\n        this.decimal(\"second\", this.secondNum)\n      }\n      this.display()\n    }\n  }\n\n  //changes opacity to the button on click, function is called on the specific html button\n  flash = (button) => {\n    let calcButton = document.querySelector(button)\n    calcButton.classList.add(\"flash\")\n    setTimeout(function() { calcButton.classList.remove(\"flash\") }, 500);\n  }\n\n  //to limit user to one decimal button press for each number\n  decimal = (string, num) => {\n    let hasDecimal1 = num.match(/[.]/)\n    let hasDecimal2 = num.match(/[.]/)\n\n    if (hasDecimal1 && string === \"first\")  {\n      document.querySelector(\".decimal\").disabled = \"true\"\n    } else if (hasDecimal2 && string === \"second\") {\n      document.querySelector(\".decimal\").disabled = \"true\"\n    }\n  }\n\n  //reset the calculator to initial state\n  //calls display function to see if text needs to be reset to larger size\n  handleClear  = () => {\n    this.firstNum = \"\"\n    this.secondNum = \"\"\n    document.querySelector(\".decimal\").disabled = false\n    this.setState({\n      display: 0,\n      convertNum: true,\n      convert2ndNum: true,\n      isFirstExpr: true\n    })\n    this.display()\n  }\n\n  //converts number on the display to negative or positive\n  handleConvert = () => {\n    \n    //to prevent user from hitting the conversion button prior to entering a number\n    if (this.firstNum === \"\") {\n      return;\n    }\n\n    //change both numbers from string to a float number\n    let  convert = parseFloat(this.firstNum)\n    let  convert2nd = parseFloat(this.secondNum)\n\n    //if true, handle the first number\n    if (this.state.isFirstExpr) {\n      // if true, make the number negative\n      if (this.state.convertNum) {\n        let toNeg = -Math.abs(convert)\n        toNeg = toNeg.toString()\n        this.setState({\n          convertNum: false\n        })\n        this.firstNum = toNeg\n      //if false, make the number positive\n      } else {\n        let toPos = Math.abs(convert)\n        toPos = toPos.toString()\n        this.setState({\n          convertNum: true\n        })\n        this.firstNum = toPos\n      }\n      this.setState({\n        display: this.firstNum\n      })\n      this.display()\n\n    //if false, then handle second number    \n    } else {\n      // if true, make the number negative\n      if (this.state.convert2ndNum) {\n        let toNeg = -Math.abs(convert2nd)\n        toNeg = toNeg.toString()\n        this.setState({\n          convert2ndNum: false\n        })\n        this.secondNum = toNeg\n      //if false, make the number positive\n      } else {\n        let toPos = Math.abs(convert2nd)\n        toPos = toPos.toString()\n        this.setState({\n          convert2ndNum: true\n        })\n        this.secondNum = toPos\n      }\n      this.setState({\n        display: this.firstNum + this.symbol + \"(\" + this.secondNum + \")\"\n      })\n    this.display()\n    }\n  }\n\n  //converts number to a percent\n  handlePercent = () => {\n    //prevents user from hitting the button prior to entering a number\n    if (this.firstNum === \"\") {\n      return;\n    }\n    let convert = parseFloat(this.firstNum)\n    let convert2nd = parseFloat(this.secondNum)\n    let percent = convert / 100\n    let percent2nd = convert2nd / 100\n    //if true, handle first number\n    if (this.state.isFirstExpr) {\n      percent = percent.toString()\n      this.firstNum = percent\n      this.setState({\n        display: this.firstNum\n      })\n      this.display()\n    //if true, handle first number\n    } else {\n      percent2nd = percent2nd.toString()\n      this.secondNum = percent2nd\n      this.setState({\n        display: this.firstNum + this.symbol + this.secondNum\n      })\n      this.display()\n    }\n  }\n\n  //compute the two numbers based on the arithmatic operator chosen\n  handleEqual = () => {\n    let result = 0;\n    let numFirstNum = Number(this.firstNum)\n    let numSecondNum = Number(this.secondNum)\n\n    if (this.symbol === \"+\") {\n      result = numFirstNum + numSecondNum\n    } else if (this.symbol === \"-\") {\n      result = numFirstNum - numSecondNum\n    } else if (this.symbol === \"*\") {\n      result = numFirstNum * numSecondNum\n    } else if (this.symbol === \"/\") {\n      result = numFirstNum / numSecondNum\n    }\n    //give result back with x decimal places\n    //finalResult = result.toFixed()\n    \n    //reset most of the states and variables back to initial state\n    //display and firstNum show result in case user wants to compute further\n    this.firstNum = result\n    this.secondNum = \"\"\n    this.symbol = \"\"\n    console.log(\"first: \" + this.firstNum)\n    console.log(\"symbol: \" + this.symbol)\n    console.log(\"second: \" + this.secondNum)\n    console.log(\"result: \" + result)\n    document.querySelector(\".decimal\").disabled = false\n    this.display(result)\n    this.setState({\n      display: result,\n      convertNum: true,\n      convert2ndNum: true,\n      isFirstExpr: true\n    })\n    console.log(\"state display: \" + this.state.display)\n  }\n  \n  //change the text size on the display depending on total number of characters\n  display = (resultLength) => {\n    let display = document.querySelector('.display-text')\n\n    if (this.firstNum.length + this.symbol.length + this.secondNum.length > 10 || resultLength > 10) {\n      display.classList.add(\"display-text-small\")\n      display.classList.remove(\"display-text-large\")\n    } else if (this.firstNum.length + this.symbol.length + this.secondNum.length <= 10 || resultLength <= 10 ) {\n      display.classList.remove(\"display-text-small\")\n      display.classList.add(\"display-text-large\")\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"calc-container\">\n        <div className=\"display\">\n          <p className=\"display-text display-text-large\">{this.state.display}</p>\n        </div>\n        <button onClick={() => {this.handleClear();this.flash(\".clear\")}} className=\"button text dark-grey clear\">C</button>\n        <button onClick={() => {this.handleConvert();this.flash(\".negative\")}} className=\"button text dark-grey negative\">+/-</button>\n        <button onClick={() => {this.handlePercent();this.flash(\".percent\")}} className=\"button text dark-grey percent\">%</button>\n        <button onClick={() => {this.submit(\"/\");this.flash(\".divide\")}} className=\"button text orange divide\">/</button>\n        <button onClick={() => {this.submit(\"7\");this.flash(\".seven\")}} className=\"button text light-grey seven\">7</button>\n        <button onClick={() => {this.submit(\"8\");this.flash(\".eight\")}} className=\"button text light-grey eight\">8</button>\n        <button onClick={() => {this.submit(\"9\");this.flash(\".nine\")}} className=\"button text light-grey nine\">9</button>\n        <button onClick={() => {this.submit(\"*\");this.flash(\".multiply\")}} className=\"button text orange multiply\">X</button>\n        <button onClick={() => {this.submit(\"4\");this.flash(\".four\")}} className=\"button text light-grey four\">4</button>\n        <button onClick={() => {this.submit(\"5\");this.flash(\".five\")}} className=\"button text light-grey five\">5</button>\n        <button onClick={() => {this.submit(\"6\");this.flash(\".six\")}} className=\"button text light-grey six\">6</button>\n        <button onClick={() => {this.submit(\"-\");this.flash(\".subtract\")}} className=\"button text orange subtract\">-</button>\n        <button onClick={() => {this.submit(\"1\");this.flash(\".one\")}} className=\"button text light-grey one\">1</button>\n        <button onClick={() => {this.submit(\"2\");this.flash(\".two\")}} className=\"button text light-grey two\">2</button>\n        <button onClick={() => {this.submit(\"3\");this.flash(\".three\")}} className=\"button text light-grey three\">3</button>\n        <button onClick={() => {this.submit(\"+\");this.flash(\".add\")}} className=\"button text orange add\">+</button>\n        <button onClick={() => {this.submit(\"0\");this.flash(\".zero\")}} className=\"text light-grey zero\">0</button>\n        <button onClick={() => {this.submit(\".\");this.flash(\".decimal\")}} className=\"button text light-grey decimal\" disabled={false}>.</button>\n        <button onClick={() => {this.handleEqual();this.flash(\".equals\")}} className=\"button text orange equals\">=</button>\n      </div>\n    )\n  }\n}\n\n  \nexport default Calculator\n\n"]},"metadata":{},"sourceType":"module"}