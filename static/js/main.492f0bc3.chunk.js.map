{"version":3,"sources":["Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","display","convertNum","convert2ndNum","isFirstExpr","firstNum","secondNum","symbol","submit","num","regex","result1","match","result2","operator","console","log","length","handleClear","setState","decimal","document","querySelector","disabled","flash","button","calcButton","classList","add","setTimeout","remove","string","hasDecimal1","hasDecimal2","handleConvert","convert","parseFloat","convert2nd","toNeg","Math","abs","toString","toPos","handlePercent","percent","percent2nd","handleEqual","finalResult","result","numFirstNum","Number","numSecondNum","toFixed","resultLength","className","this","onClick","Component","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.492f0bc3.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Calculator extends Component {\n  state = {\n    display: 0,           //this is what is shown on the calc display\n    convertNum: true,\n    convert2ndNum: true,\n    isFirstExpr: true     //when true, calc will deal with first input number, false will be the 2nd number\n  }\n\n  //Global Variables for the equation\n  firstNum = \"\"\n  secondNum = \"\"\n  symbol = \"\"\n\n  //to submit the numbers\n  submit = (num) => {\n    let regex = /[-+*/]/\n    let result1 = num.match(regex)\n    let result2 = num.match(regex)\n    let operator = num.match(regex)\n    console.log(operator)\n\n    //if arithmatic operators are pushed first, reset\n    if (result1 !== null && this.firstNum.length === 0) {\n      this.handleClear()\n    }\n\n    //if a valid numerical or decimal key is pressed first, add it to the state\n    //decimal function added to make sure that the decimal only gets pressed once for the first input number,\n    //then Pointer Events is disabled on that button\n    //display function added to check the number of characters on the display and resize when necessary\n    if (this.state.isFirstExpr) {\n      if (result1 == null) {\n        this.firstNum = \"\" + this.firstNum + num\n        this.setState({\n          display: this.firstNum\n        })\n        this.decimal(\"first\", num)\n        this.display()\n      } \n\n      //if an arithmatic operator is pressed, add it to the state\n      //display function added to check the number of characters on the display and resize when necessary\n      if (result1 !== null && this.firstNum.length > 0) {\n        this.symbol = num\n        this.setState({\n          display: this.firstNum + this.symbol,\n          isFirstExpr: false\n        })\n        document.querySelector(\".decimal\").disabled = false\n        this.display()\n      }\n    }\n    \n    //moving the calculator onto the 2nd input number\n    //decimal function added to make sure that the decimal only gets pressed once for the 2nd input number,\n    //then Pointer Events is disabled on that button\n    //display function added to check the number of characters on the display and resize when necessary\n    if (this.state.isFirstExpr === false) {\n      if (result2 == null) {\n        this.secondNum = \"\" + this.secondNum + num\n        this.setState({\n          display: this.firstNum + this.symbol + this.secondNum,\n          isFirstExpr: false,\n        })\n        this.decimal(\"second\", this.secondNum)\n      }\n      this.display()\n    }\n  }\n\n  //changes opacity to the button on click, function is called on the specific html button\n  flash = (button) => {\n    let calcButton = document.querySelector(button)\n    calcButton.classList.add(\"flash\")\n    setTimeout(function() { calcButton.classList.remove(\"flash\") }, 500);\n  }\n\n  //to limit user to one decimal button press for each number\n  decimal = (string, num) => {\n    let hasDecimal1 = num.match(/[.]/)\n    let hasDecimal2 = num.match(/[.]/)\n\n    if (hasDecimal1 && string === \"first\")  {\n      document.querySelector(\".decimal\").disabled = \"true\"\n    } else if (hasDecimal2 && string === \"second\") {\n      document.querySelector(\".decimal\").disabled = \"true\"\n    }\n  }\n\n  //reset the calculator to initial state\n  //calls display function to see if text needs to be reset to larger size\n  handleClear  = () => {\n    this.firstNum = \"\"\n    this.secondNum = \"\"\n    document.querySelector(\".decimal\").disabled = false\n    this.setState({\n      display: 0,\n      convertNum: true,\n      convert2ndNum: true,\n      isFirstExpr: true\n    })\n    this.display()\n  }\n\n  //converts number on the display to negative or positive\n  handleConvert = () => {\n    \n    //to prevent user from hitting the conversion button prior to entering a number\n    if (this.firstNum === \"\") {\n      return;\n    }\n\n    //change both numbers from string to a float number\n    let  convert = parseFloat(this.firstNum)\n    let  convert2nd = parseFloat(this.secondNum)\n\n    //if true, handle the first number\n    if (this.state.isFirstExpr) {\n      // if true, make the number negative\n      if (this.state.convertNum) {\n        let toNeg = -Math.abs(convert)\n        toNeg = toNeg.toString()\n        this.setState({\n          convertNum: false\n        })\n        this.firstNum = toNeg\n      //if false, make the number positive\n      } else {\n        let toPos = Math.abs(convert)\n        toPos = toPos.toString()\n        this.setState({\n          convertNum: true\n        })\n        this.firstNum = toPos\n      }\n      this.setState({\n        display: this.firstNum\n      })\n      this.display()\n\n    //if false, then handle second number    \n    } else {\n      // if true, make the number negative\n      if (this.state.convert2ndNum) {\n        let toNeg = -Math.abs(convert2nd)\n        toNeg = toNeg.toString()\n        this.setState({\n          convert2ndNum: false\n        })\n        this.secondNum = toNeg\n      //if false, make the number positive\n      } else {\n        let toPos = Math.abs(convert2nd)\n        toPos = toPos.toString()\n        this.setState({\n          convert2ndNum: true\n        })\n        this.secondNum = toPos\n      }\n      this.setState({\n        display: this.firstNum + this.symbol + \"(\" + this.secondNum + \")\"\n      })\n    this.display()\n    }\n  }\n\n  //converts number to a percent\n  handlePercent = () => {\n    //prevents user from hitting the button prior to entering a number\n    if (this.firstNum === \"\") {\n      return;\n    }\n    let convert = parseFloat(this.firstNum)\n    let convert2nd = parseFloat(this.secondNum)\n    let percent = convert / 100\n    let percent2nd = convert2nd / 100\n    //if true, handle first number\n    if (this.state.isFirstExpr) {\n      percent = percent.toString()\n      this.firstNum = percent\n      this.setState({\n        display: this.firstNum\n      })\n      this.display()\n    //if true, handle first number\n    } else {\n      percent2nd = percent2nd.toString()\n      this.secondNum = percent2nd\n      this.setState({\n        display: this.firstNum + this.symbol + this.secondNum\n      })\n      this.display()\n    }\n  }\n\n  //compute the two numbers based on the arithmatic operator chosen\n  handleEqual = () => {\n    let result = 0;\n    let finalResult;\n    let numFirstNum = Number(this.firstNum)\n    let numSecondNum = Number(this.secondNum)\n\n    if (this.symbol === \"+\") {\n      result = numFirstNum + numSecondNum\n    } else if (this.symbol === \"-\") {\n      result = numFirstNum - numSecondNum\n    } else if (this.symbol === \"*\") {\n      result = numFirstNum * numSecondNum\n    } else if (this.symbol === \"/\") {\n      result = numFirstNum / numSecondNum\n    }\n    //give result back with 5 decimal places\n    finalResult = result.toFixed(5)\n    \n    //reset most of the states and variables back to initial state\n    //display and firstNum show result in case user wants to compute further\n    this.setState({\n      display: finalResult,\n      convertNum: true,\n      convert2ndNum: true,\n      isFirstExpr: true\n    })\n    this.firstNum = result\n    this.secondNum = \"\"\n    this.symbol = \"\"\n    document.querySelector(\".decimal\").disabled = false\n    this.display(finalResult)\n  }\n  \n  //change the text size on the display depending on total number of characters\n  display = (resultLength) => {\n    let display = document.querySelector('.display-text')\n\n    if (this.firstNum.length + this.symbol.length + this.secondNum.length > 10 || resultLength > 10) {\n      display.classList.add(\"display-text-small\")\n      display.classList.remove(\"display-text-large\")\n    } else if (this.firstNum.length + this.symbol.length + this.secondNum.length <= 10 || resultLength <= 10 ) {\n      display.classList.remove(\"display-text-small\")\n      display.classList.add(\"display-text-large\")\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"calc-container\">\n        <div className=\"display\">\n          <p className=\"display-text display-text-large\">{this.state.display}</p>\n        </div>\n        <button onClick={() => {this.handleClear();this.flash(\".clear\")}} className=\"button text dark-grey clear\">C</button>\n        <button onClick={() => {this.handleConvert();this.flash(\".negative\")}} className=\"button text dark-grey negative\">+/-</button>\n        <button onClick={() => {this.handlePercent();this.flash(\".percent\")}} className=\"button text dark-grey percent\">%</button>\n        <button onClick={() => {this.submit(\"/\");this.flash(\".divide\")}} className=\"button text orange divide\">/</button>\n        <button onClick={() => {this.submit(\"7\");this.flash(\".seven\")}} className=\"button text light-grey seven\">7</button>\n        <button onClick={() => {this.submit(\"8\");this.flash(\".eight\")}} className=\"button text light-grey eight\">8</button>\n        <button onClick={() => {this.submit(\"9\");this.flash(\".nine\")}} className=\"button text light-grey nine\">9</button>\n        <button onClick={() => {this.submit(\"*\");this.flash(\".multiply\")}} className=\"button text orange multiply\">X</button>\n        <button onClick={() => {this.submit(\"4\");this.flash(\".four\")}} className=\"button text light-grey four\">4</button>\n        <button onClick={() => {this.submit(\"5\");this.flash(\".five\")}} className=\"button text light-grey five\">5</button>\n        <button onClick={() => {this.submit(\"6\");this.flash(\".six\")}} className=\"button text light-grey six\">6</button>\n        <button onClick={() => {this.submit(\"-\");this.flash(\".subtract\")}} className=\"button text orange subtract\">-</button>\n        <button onClick={() => {this.submit(\"1\");this.flash(\".one\")}} className=\"button text light-grey one\">1</button>\n        <button onClick={() => {this.submit(\"2\");this.flash(\".two\")}} className=\"button text light-grey two\">2</button>\n        <button onClick={() => {this.submit(\"3\");this.flash(\".three\")}} className=\"button text light-grey three\">3</button>\n        <button onClick={() => {this.submit(\"+\");this.flash(\".add\")}} className=\"button text orange add\">+</button>\n        <button onClick={() => {this.submit(\"0\");this.flash(\".zero\")}} className=\"text light-grey zero\">0</button>\n        <button onClick={() => {this.submit(\".\");this.flash(\".decimal\")}} className=\"button text light-grey decimal\" disabled={false}>.</button>\n        <button onClick={() => {this.handleEqual();this.flash(\".equals\")}} className=\"button text orange equals\">=</button>\n      </div>\n    )\n  }\n}\n\n  \nexport default Calculator\n\n","import React, {Component} from 'react';\nimport Calculator from './Calculator'\n\nclass App extends Component {\n  render() {\n    return (\n      <Calculator />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}